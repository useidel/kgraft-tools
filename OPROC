# Tools to create your own kGraft modules
#
git clone https://git.kernel.org/pub/scm/linux/kernel/git/jirislaby/kgraft.git
cd kgraft && git checkout kgraft
# The tools directory kgraft has gone in the recent 
# versions of this fork ... we re-create for our needs
[ -d tools/kgraft ] || mkdir -p tools/kgraft
cd ..
git clone git://sourceware.org/git/binutils.git
cd binutils
patch -p1 < /path/to/objcopy.diff
./configure
make
cd ..
cp binutils/binutils/objcopy kgraft/tools/kgraft/objcopy-hacked

# To create your kGraft enabled kernel
# MYVERSION=3.17.0-rc4+
#
# The following 3 steps were already done above
#git clone https://git.kernel.org/pub/scm/linux/kernel/git/jirislaby/kgraft.git
#cd kgraft && git checkout kgraft
#mkdir -p tools/kgraft
#
# and populate it with our tools
cd ..
git clone https://github.com/useidel/kgraft-tools
cd kgraft-tools
cp create-kgrmodule.sh  create-stub.sh  extract-syms.sh objcopy.diff ../kgraft/tools/kgraft
cd ../kgraft
# We will use this directory to store the object files ... is cleaner
mkdir ../obj
cp /boot/config-`uname -r` dot.config
cp dot.config ../obj/.config
# open question ... planning ahead we should set
# KCFLAGS="-ffunction-sections -fdata-sections" for the compilation
# this would ease the patch module creation later ... but I don't know
# if this would have an undesired impact to the running kernel ...
# ...
make "O=../obj/" menuconfig
make "O=../obj/" bzImage modules
cp ../obj/arch/x86_64/boot/bzImage /boot/vmlinuz-$MYVERSION
cp ../obj/System.map /boot/System.map-$MYVERSION
cp ../obj/.config /boot/config-$MYVERSION
make "O=../obj/" modules_install
# for old style initrd
  mkinitrd /boot/initrd-$MYVERSION $MYVERSION 
  # OR
  mkinitrd -k vmlinuz-$MYVERSION -i initrd-$MYVERSION 
# for dracut/initramfs
  dracut /boot/initramfs-$MYVERSION.img $MYVERSION
# integrate in boot-loader and boot, e.g.
new-kernel-pkg --initrdfile=/boot/initramfs-$MYVERSION.img --install $MYVERSION
# OR
kernel-install add $MYVERSION /boot/vmlinuz-$MYVERSION
#
# if signing of kernel modules was configured we need to save
# the key files used for this kernel build ... otherwise they 
# will be overwritten with the next build which is part of the
# process to create our own kGraft kernel module
cp ../obj/signing_key.priv ../tools/kgraft/
cp ../obj/signing_key.x509 ../tools/kgraft/

# Create your own kGraft module
# If the KCFLAGS="-ffunction-sections -fdata-sections" was not set for the initial
# build ... the kernel must be rebuild with these flags
KCFLAGS="-ffunction-sections -fdata-sections" make "O=../obj/" bzImage modules

# change into build directory of your previously build kGraft enabled kernel
# patch the sources as needed
# here we add a short message if /proc/uptime is displayed
cat <<EOF > uptime.patch
--- a/fs/proc/uptime.c  2014-04-04 15:32:51.550550150 +0200
+++ b/fs/proc/uptime.c  2014-04-04 15:33:35.268645579 +0200
@@ -24,6 +24,7 @@
        nsec = cputime64_to_jiffies64(idletime) * TICK_NSEC;
        idle.tv_sec = div_u64_rem(nsec, NSEC_PER_SEC, &rem);
        idle.tv_nsec = rem;
+       printk(" Guckst Du: ");
        seq_printf(m, "%lu.%02lu %lu.%02lu\n",
                        (unsigned long) uptime.tv_sec,
                        (uptime.tv_nsec / (NSEC_PER_SEC / 100)),
EOF
# recompile it 
KCFLAGS="-ffunction-sections -fdata-sections" make "O=../obj/" 2>&1 | tee -a build.patched.log
cd ../obj/
# now create the kGraft module using the helper scripts
# you need to know symbols have been impacted by your change
# grep for CC in build.patched.log and ignore init.o and version.o
# and do an nm or readelf on the newly compiled objects, e.g.
#
# readelf -r fs/proc/uptime.o |grep text|grep -v init|awk '{print $5}'|sed 's/\.text\.//g'|sort -u
# 
# in our case it is uptime_proc_show and uptime_proc_open
../kgraft/tools/kgraft/create-kgrmodule.sh uptime_proc_show uptime_proc_open

# This does not create a fully working module ... you will have to 
# add your adapted functions ... use the samples/kgraft/kgr_patcher.c file as template
# Also, you may have to add includes ... use the orginal .c file for comparison
# For uptime_proc_show you have to add the following header files
# #include <linux/proc_fs.h>
# #include <linux/seq_file.h>
# #include <linux/time.h>
# #include <linux/kernel_stat.h>
# #include <linux/cputime.h>
#
# and you have to amend the kgr_new_uptime_proc_open function to 
# refer to kgr_new_uptime_proc_show
#
# Once done ... just compile it again
cd kgrafttmp
make

# if a signed module is expected ... 
# we copy the key files over here ... to shorten the command :-)
cp ../../src/tools/kgraft/signing_key.* .
# and now the signing
../../src/scripts/sign-file sha512 signing_key.priv signing_key.x509 kgrmodule.ko

# Load the (hopefully) created kernel module
insmod kgrmodule.ko

# once the module is loaded you need to 'poke' the kernel a bit
for i in `dmesg |grep 'still in kernel after timeout' | awk '{print $4}' |sort -u`; do kill -USR1 $i; done
